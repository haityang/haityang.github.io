#### 安装简单的http服务器
```
$ sudo npm install http-server -g
$ http-server ./WebApp
http://localhost:8080
```

#### 安装简单的http上传服务器
```
$ sudo npm install http-upload-server -g
$ http-upload-server ./WebApp
http://localhost:8989
```

```
$ sudo npm install -g simple-http-upload-server
$ simple-http-upload-server
http://127.0.0.1:5000
```
#### node.js 相关知识
##### 1.安装node.js
* 下载包 http://nodejs.cn/download/
* 建立bin的软链接
* node -v来检查


##### 2. node.js参考文档
```
http://nodejs.cn/api/
```

##### 3.node.js 交互运行环境 REPL
```
.break
.clear
.exit
.help
.save
.load
```

##### 4.事件处理机制
* app.js

```
var http = require('http');//引用http模块
var server = http.createServer();//创建http服务器并将该服务器赋值给变量server

//为server服务器在接收到客户端请求时触发的request事件绑定多个事件处理函数
server.once('request', function(req,res) {
    if(req.url!=="/favicon.ico")
        console.log('接收到客户端请求。');
});

server.on('request', function(req,res) { 
    if(req.url!=="/favicon.ico"){
        console.log(req.url);
    }
    res.end();
});

server.once('request', function(req,res) {
    if(req.url!=="/favicon.ico")
        console.log('发送响应完毕。');
});

server.on('customEvent',function(arg1,arg2,arg3){
    console.log('自定义事件被触发。');
    console.log(arg1);
　　console.log(arg2);
　　console.log(arg3);
});

server.emit('customEvent','自定义参数1','自定义参数2','自定义参数3');

server.listen(1337, "127.0.0.1");

```

##### 5.Node.js 中使用调试器

```
node debug app.js //开始调试
list (0) //list出源代码
continue  //c 继续执行
next //n
step //s
out  //0
watch('使用的表达式')
unwatch('使用的表达式')
setBreakPoint(filename, line) //sb(filename, line)
clearBreakPoint(filename, line) //cb(filename, line)
backtrace //bt
repl //进入repl环境 
restart //
kill //
run  //
scripts   //当前正在运行的文件和被加载文件
version  //
``` 

##### 6.模块与npm包管理工具

npm 淘宝镜像
你可以使用我们定制的 cnpm (gzip 压缩支持) 命令行工具代替默认的 npm:

```
$ npm install -g cnpm --registry=https://registry.npm.taobao.org

```
或者你直接通过添加 npm 参数 alias 一个新命令:

```
alias cnpm="npm --registry=https://registry.npm.taobao.org \
--cache=$HOME/.npm/.cache/cnpm \
--disturl=https://npm.taobao.org/dist \
--userconfig=$HOME/.cnpmrc"

# Or alias it in .bashrc or .zshrc
$ echo '\n#alias for cnpm\nalias cnpm="npm --registry=https://registry.npm.taobao.org \
  --cache=$HOME/.npm/.cache/cnpm \
  --disturl=https://npm.taobao.org/dist \
  --userconfig=$HOME/.cnpmrc"' >> ~/.zshrc && source ~/.zshrc
```

npm 包管理工具 

```
$ npm search forever
$ npm view forever
$ npm install forever
$ npm install -g forever
$ npm root -g
$ npm config set prefix "d:\node"
$ npm list
$ npm list -g
$ npm uninstall forever
$ npm uninstall -g forever
$ npm update forever
$ npm update -g forever
$ npm update
$ npm update -g

```

##### 7.使用Buffer类处理二进制数据

##### 8.在Node.js中操作文件系统

```

```


##### 9.实现TCP与UDP通信
 

* 创建TCP服务器（net 模块）

```
var net = require('net');
var server = net.createServer();
server.on('connection', function(socket) {
    console.log('客户端与服务器端连接已建立。');
    socket.setEncoding('utf8');
    socket.on('data',function(data){
        console.log('已接收客户端发送的数据：'+data);
        socket.write('确认数据：'+data);    
    });
});
server.listen(8431,'localhost');
```

* 创建 TCP 客户端

```
var net = require('net');
var client = new net.Socket();
client.setEncoding('utf8');
client.connect(8431,'localhost',function(){
    console.log('已连接到服务器端。');
    client.write('你好。');
});
client.on('data',function(data){
    console.log('已接收服务器端发送的数据：'+data); 
});
```


##### 10.创建 HTTP 与 HTTPS服务器与客户端

##### 11.加密与压缩

##### 12.MongoDB存取数据

##### 13.MySQL 数据库存取数据

##### 14.使用 Express 构建Web应用程序
* API中文手册 http://www.expressjs.com.cn/4x/api.html

##### 9. 安裝MongoDB (Linux)

``` 
1. https://www.mongodb.com/download-center?jmp=nav#community 下載社區版
2. sudo mv mongodb-linux-x86_64-ubuntu1604-3.6.5 /usr/local/mongodb 解壓到相应目录
3. cd /usr/local/mongodb
4. sudo mkdir -p /data/db
5. sudo apt install mongodb-server6. sudo mongod //MongoDB starting : pid=24816 port=27017 dbpath=/data/db 64-bit host=ubuntu
7. mongo
8. sudo npm install -g mongodb

```





