##### Python

https://www.python.org

https://docs.python.org/3/ 

##### Pip (Pypi仓库)
```
sudo apt install python-pip
//更新pip
python -m pip install --upgrade pip
```

#### python 装不同的版本
If you are using mac, you can install pyenv from Brew, install the desired versions, list the installed versions, and activate each version locally or globally.
我也推荐 pyenv，很好的管理多版本和多环境。它在管理多环境的时候，缺省会使用 python -m venv


```
# 查看当前版本
pyenv version

# 查看所有版本
pyenv versions

# 查看所有可安装的版本
pyenv install --list

# 安装指定版本
pyenv install 3.6.5
# 安装新版本后rehash一下
pyenv rehash

# 删除指定版本
pyenv uninstall 3.5.2

# 指定全局版本
pyenv global 3.6.5

# 指定多个全局版本, 3版本优先
pyenv global 3.6.5 2.7.14

# 查看当前版本
python -V


```

##### pyenv virtualenv使用

```
1.安装：
brew install pyenv-virtualenv

# virtual environments from pyenv
pyenv install 3.8.11
pyenv virtualenvs
pyenv virtualenv 3.8.11 new-env
pyenv activate new-env
pyenv deactivate 
pyenv virtualenv-delete new-env
# You can also use `pyenv local`
pip install -r /path/to/requirements.txt
pip --trusted-host pypi.python.org install PyExecJS

# Run the content in the shell
# init conda, the following command write scripts into your shell init file automatically
conda init

# disable init of env "base"
conda config --set auto_activate_base false

# virtual environments from conda
conda env create new-env python=3.6
conda env list
conda activate new-env
conda deactivate

```

##### Pip 国内镜像

阿里云 http://mirrors.aliyun.com/pypi/simple/

中国科技大学 https://pypi.mirrors.ustc.edu.cn/simple/

豆瓣(douban) http://pypi.douban.com/simple/

清华大学 https://pypi.tuna.tsinghua.edu.cn/simple/

中国科学技术大学 http://pypi.mirrors.ustc.edu.cn/simple/


临时使用： 
可以在使用pip的时候在后面加上-i参数，指定pip源 
eg: pip install scrapy -i https://pypi.tuna.tsinghua.edu.cn/simple

永久修改： 
linux: 
修改 ~/.pip/pip.conf (没有就创建一个)， 内容如下：

```
[global]
index-url = https://pypi.tuna.tsinghua.edu.cn/simple
```


##### NumPy
http://www.numpy.org

https://docs.scipy.org/doc/
```
sudo pip install numpy
```

##### Pandas

http://pandas.pydata.org

http://pandas.pydata.org/pandas-docs/stable/pandas.pdf

```
sudo pip install pandas
```

##### Matplotlib

https://matplotlib.org

https://matplotlib.org/api/pyplot_summary.html

```
sudo pip install matplotlib
```


##### IPython

http://ipython.org

```
sudo pip install ipython==8888 #现指定一个不存在的版本以查看可用版本，发现5版本中有5.3.0（你的可能不一样）
sudo pip install ipython==5.7.0
```


##### SciPy

https://docs.scipy.org/doc/scipy/reference/


```
sudo pip install scipy
```

##### Misc

```
apt-get install python-tk
```

##### 验证画图

```
$ ipython --pylab

import matplotlib.pyplot as plt
fig = plt.figure()
ax1 = fig.add_subplot(2, 2, 1)

```


##### sklearn

```
sudo pip install sklearn
```


##### 安装homebrew

```
/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"

```

##### 安装 python3

```
brew install python3

```


##### 下载anaconda

```
https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/?C=M&O=A

添加清华源：
conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/
conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/
conda config --set show_channel_urls yes

vi .condarc
channels:
- defaults
show_channel_urls: true
default_channels:
- https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main
- https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r
custom_channels:
conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud
msys2: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud
bioconda: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud
menpo: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud
pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud


```


#### python简单http服务器:

```
sudo python -m SimpleHTTPServer 10000
python -m http.server

```

#### python简单https服务器

```
from http.server import HTTPServer, BaseHTTPRequestHandler
import ssl

httpd = HTTPServer(('localhost', 4443), BaseHTTPRequestHandler)

httpd.socket = ssl.wrap_socket (httpd.socket, 
        keyfile="/Users/yanghaitao/Applications/cert/key.pem", 
        certfile='/Users/yanghaitao/Applications/cert/cert.pem', server_side=True)

httpd.serve_forever()

```

#### 生成自签名的证书，用于https

```
openssl req -newkey rsa:2048 -new -nodes -x509 -days 3650 -keyout key.pem -out cert.pem

```



在pyenv环境下安装miniconda  

```  

pyenv install miniconda3-4.7.12
//列出当前环境安装的包
conda list 
conda list -n myflakes

//复制一个虚拟环境
conda env export > environment.yml
conda env create -f environment.yml

//查询包
conda search numpy 

//安装指定环境包
conda install -n  myflakes numpy
conda update  -n  myflakes numpy
conda remove  -n  myflakes numpy

//安装升级自身
conda update conda
conda update anaconda
conda update python  

```




安装pip

```
$ curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py   # 下载安装脚本
$ sudo python get-pip.py    # 运行安装脚本
$ sudo python3 get-pip.py
$ sudo pip3 install --upgrade pip
```

安装jupyter

```
$ pip3 install jupyter
$ pip show jupyter
```

打开notebook

```
$ jupyter notebook

```

安装和打开jupyterlab

```
pip install jupyterlab
jupyter-lab

```

错误： ModuleNotFoundError: No module named 'pip._internal.cli.main'

```
$ sudo python3 -m pip install --upgrade pip
$ sudo python -m pip install --upgrade pip
```

从excel导入多国语言

```
$ sudo pip install xlrd==1.2.0       
$ python run.py excel.xlsx  

```

简单用pip3 install xlrd 成功了，还是找不到模块的话，需要这样安装。
如果你只有一个python环境，其实没区别的
python -m pip 是用了当前 python 的内置模块，不受系统环境影响，有的时候环境乱了，pip命令找不到
有时候pip指向的python不是你当前用的，python执行告诉你缺lib，你pip装了，结果还是报告缺lib，你仔细一看，pip给你装到其他pyhon的库里去了，这时候就要用python -m pip确保把库装到自己用的python里去

```
$ python3 -m pip install xlrd

```



安装依赖库   
```
python3 -m pip install openpyxl
```

在Mac中正确安装python的方式  
https://opensource.com/article/19/5/python-3-default-mac
执行下面语句，pyenv的配置才能生效。

```
$ echo -e 'if command -v pyenv 1>/dev/null 2>&1; then\n  eval "$(pyenv init --path)"\nfi' >> ~/.zshrc

```


当前系统中：

```
python version
3.5.10： tensorflow-v1 
3.8.11: tensorflow-v2
```

执行前先确认好：

```
which python
which pip

```


今天学到一个Python的小技巧

```
python setup.py install 可以用 pip install . 替代
python setup.py develop 可以用 pip install -e . 替代
```


多环境优先使用内置的 venv, 不要用 conda

```
1.下载miniconda: https://docs.conda.io/en/latest/miniconda.html
2.点击安装pkg
3.conda env create -f environment.yml
4.conda activate gluon
5.conda deactivate
6.jupyter notebook
7. set MXNET_GLUON_REPO=https://apache-mxnet.s3.cn-north-1.amazonaws.com.cn/ jupyter notebook

```

conda 操作

```
查看环境
conda env list

创建环境
conda create -n python36 python=3.6

进入环境
source activate python36
activate python36 # windows下

搜索包
conda search mxnet*

指定环境，查看已安装的包
conda list -n python36

指定环境，安装指定版本的包
conda install -n python36 mxnet==1.0.0

指定环境，更新包
conda update -n python36 mxnet

指定环境，删除包
conda remove -n python36 mxnet

导出环境为yml
conda env export > environment.yml

根据yml创建环境
conda env create -f environment.yml

对yml文件修改后更新环境
conda env update -f environment.yml

退出环境
source deactivate
deactivate # windows下
conda deactivate # 高版本conda中用这个

复制环境
conda create -n python36 --clone python36_new

删除环境
conda remove -n python36 --all

更改镜像源
conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/

conda config --set show_channel_urls yes

修改后可以在~/.condarc配置文件中可以看到相应信息
pip修改镜像源(修改~/.pip/pip.conf配置文件)

[global]
index-url = https://pypi.tuna.tsinghua.edu.cn/simple

更新conda:
conda update -n base conda
设置镜像优先权:
conda config --set channel_priority flexible
```


jupyter notebook

```
conda install -c conda-forge jupyterlab
conda install -c conda-forge notebook
conda install -c conda-forge jupyter_nbextensions_configurator
conda install -c conda-forge autopep8


```

运行jupyter lab

```
conda install -c conda-forge jupyterlab
jupyter-lab
pip install jupyterlab_latex
jupyter serverextension enable --sys-prefix jupyterlab_latex
jupyter labextension install @jupyterlab/latex


```

安装opencv

```
conda install opencv-python

```

