##### Flutter常用命令


```
$ flutter run  //（默认为debug环境）
$ flutter run --release //(以release模式运行)
$ flutter -h //帮助
$ flutter doctor   //诊断flutter
$ flutter --version //查看flutter版本号
$ flutter upgrade    //flutter升级
$ flutter channel  //查看flutter当前版本
$ flutter channel master   切换flutter版本的master
$ flutter packages get //获取flutter packages包
$ flutter pub get   //获取flutter packages包
$ flutter packages upgrade //升级到依赖package的最新版本
$ flutter pub upgrade //升级到依赖package的最新版本
$ flutter pub outdated //标识过期依赖包。
$ flutter clean //删除.ios目录 
$ flutter analyze //命令行下静态分析flutter代码
$  flutter precache //开发二进制文件预下载

-----
//升级到最新分版本
$ flutter channel master
$ flutter upgrade

//降级flutter 
$ flutter channel stable //切换到stable channel
$ flutter downgrade 1.17.5 //降级到最近的一个版
$ flutter upgrade //相当于刷新到最新版
---------
pub-cache
flutter pub cache clean
flutter pub cahce repair
---------
//包管理 
pub global activate fvm //激活fvm (安装fvm)
fvm install 1.17.5 //安装1.17.5版本
fvm use 1.17.5 //使用版本
fvm global 1.17.5 //全局使用
fvm remove 1.17.5 //移除版本
fvm list //列出所有安装的版本
fvm releases //列出当前所有发布的版本
pub global activate fvm //更新fvm
---------
想实现fvm包管理，需要做一些额外的事情
1. fvm global 1.17.5
2. disable old flutter path in ~/.zshrc: #export PATH=/opt/flutter/bin:$PATH //use fvm instead
3. add path to ~/.zshrc: export PATH="$PATH":"$HOME/fvm/default/bin"
4. flutter precache
5. flutter clean
6. flutter pub get
7. pod install

```

换机器，导致fvm不能升级

```
//更新 command line tool
softwareupdate --all --install --force
sudo rm -rf /Library/Developer/CommandLineTools
sudo xcode-select --install
  
//重新安装dart
brew uninstall dart
brew install dart

//重新安装fvm
pub global activate fvm

//重新安装flutter
fvm remove 2.2.2
fvm install 2.2.2
fvm global 2.2.2
flutter precache --ios

```


调试

```
debugDumpApp()  //widget树
debugDumpRenderTree() //渲染树
debugDumpLayerTree() //Layer树
debugDumpSemanticsTree() //语义树
debugPrintBeginFrameBanner和debugPrintEndFrameBanner //标识帧的开始和结束

StackTrace stacktrace = StackTrace.current;
_logger.info("my stack, $stacktrace");
print("my stack, $stacktrace");

```


dart SDK

```
1. vs创建flutter demo
2.  vs 创建 package plugin
3.  在finder中创建文件夹，引入framework,不要在vs中创建文件夹，否则脚本copy不上去依赖native库。

```


创建flutter demo

```
flutter create demo
cd demo
flutter run

```

flutter demo 显示中文

```
1. 编辑pubspec.yaml
dependencies:
  flutter:
    sdk: flutter
  flutter_localizations: # Add this line
    sdk: flutter         # Add this line
    
2. 执行 flutter pub get
3. 在dart代码中加入：
import 'package:flutter_localizations/flutter_localizations.dart';

return MaterialApp(
  title: 'Flutter Demo',
  theme: ThemeData(
    primarySwatch: Colors.blue,
  ),
    localizationsDelegates: [ //add this line 
    GlobalMaterialLocalizations.delegate, //add this line 
    GlobalWidgetsLocalizations.delegate, //add this line 
  ], //add this line 
  supportedLocales: [const Locale('zh', 'CH')],//add this line 
  home: MyHomePage(title: 'Flutter Demo Home Page'),
);


```

.pub cache出错则运行下列命令

```
flutter pub cache repair

```

vscode 相关

```
1. 查看最近打开的文件： cmd + p  //command palette:View: Show All Editors By Most Recently Used


```

Customizing static analysis  允许隐含类型
https://dart.dev/guides/language/analysis-options  
Place the analysis options file, analysis_options.yaml, at the root of the package, in the same directory as the pubspec file.  

```
#https://dart.dev/guides/language/analysis-options
analyzer:
  strong-mode:
    implicit-casts: true
    implicit-dynamic: true

```

Flutter plugin 的设置

```
诸如出现不能识别  
Objective-C++ importing C++ class fails, cassert not found  
Go to build settings for your project  
find the "Compile Sources As" setting  
set it to "Objective-C++"  
re-build  
把#include "c++.h" 文件放在.mm里。放在header的话会报错。

设置好以下文件后，在example中执行：  
flutter create .    or flutter pub get  s
cd ios  
pod install 

```

完整的plugin 说明：

```
#
# To learn more about a Podspec see http://guides.cocoapods.org/syntax/podspec.html.
#
Pod::Spec.new do |s|
  s.name             = 'demo'
  s.version          = '0.0.1'
  s.summary          = 'A new flutter plugin project.'
  s.description      = <<-DESC
A new flutter plugin project.
                       DESC
  s.homepage         = 'http://example.com'
  s.license          = { :file => '../LICENSE' }
  s.author           = { 'Your Company' => 'email@example.com' }
  s.source           = { :path => '.' }
  s.ios.deployment_target = '9.0'
  s.source_files = 'Classes/**/*'
  s.public_header_files = 'Classes/**/*.h'
  s.dependency 'Flutter'
  s.libraries = 'c++','sqlite3.0','z','resolv','xml2'
  s.xcconfig = {
         'CLANG_CXX_LANGUAGE_STANDARD' => 'c++11',
         'CLANG_CXX_LIBRARY' => 'libc++'
    }
  s.framework = 'AudioToolbox','CoreTelephony','VideoToolbox','CoreVideo','Accelerate','CoreML','Vision','Metal'
  s.vendored_frameworks = 'Framework/*.framework'
  s.frameworks = "MyFramework",'Accelerate','CoreML'  #link libs
  #resource files 和resource_bundle二选下，都会打到framework里，它不产生bundle
  #s.resources = 'Assets/*'  
  s.resource_bundles = {
    'AIModels' => ['Assets/**/*{models}']
  }
  end

```


### 运行一个dart文件

```
 $ dart create myapp
 $ cd myapp
 $ dart run

```