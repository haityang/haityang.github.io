
* #### crash log 设备中存放地址：

```
/var/mobile/Library/Logs/CrashReporter/InterfaithExplorer_2010-11-22-140841_ianvinkipad.plist 

```


* 设备中可以看到:

Settings -> General -> About -> Diagnostics & Usage
把崩溃日志拷贝成.crash后导入organizer,即可符号化



* 用itune同步后，在mac中可以看到

~/Library/Logs/CrashReporter/MobileDevice/



* 符号化

```
Crash reports with stack traces need to be symbolicated before they can be analyzed. 
Symoblication replaces memory addresses with human-readable function names and line numbers. 
If you get crash logs off a device through Xcode's Organizer window, then they will be symbolicated for you automatically after a few seconds. 
Otherwise you will need to symbolicate the .crash file yourself by importing it to the Xcode Organizer.
 See Symbolication for details
 
```
 
 
* Put your release build and your .dSYM file in the same directory and open terminal
 
```
$cd directory
$lldb MyApp.app
(lldb) image lookup -v --address 0x00085f3c

```



* 利用atos工具

```
atos -o Debug-iphoneos/demo.app.dSYM/Contents/Resources/DWARF/demo -l 0x103c40000 0x00000001041c1fb8

```



* crash log 符号化

```
find . -name symbolicatecrash  //在Xcode目录里找
dwarfdump --uuid demo.app.dSYM
dwarfdump --uuid demo.app	/携程旅行
export DEVELOPER_DIR="/Applications/Xcode.app/Contents/Developer" //export DEVELOPER_DIR=`xcode-select --print-path`
/Applications/Xcode.app/Contents/SharedFrameworks/DVTFoundation.framework/Versions/A/Resources/symbolicatecrash -v a.crash demo.app.dSYM/ 2 > a.log

```


* 删除crash log:

Not saving crash log because we have reached the limit for logs to store on disk. 
Sync or otherwise clear logs from /var/mobile/Library/Logs/CrashReporter to save new log

Disconnect your device and close Xcode.
On your dev machine you should look in:
/Users/%username%/Library/Logs/CrashReporter/MobileDevice/%devicename%
Move all reports to the Trash and then sync your device with iTunes. That should remove the logs from the device.


* Main Thread Checker: UI API called on a background thread

```

It's hard to find the UI code which is not executed in main thread sometimes. You can use the trick below to locate it and fix it.

1. Choose Edit Scheme -> Diagnostics, tick Main Thread Checker and Pause on issues. enter image description here
2. Run your iOS application to reproduce this issue. (Xcode should pause on the first issue.) enter image description here
3. Wrap the code that modify the UI in DispatchQueue.main.async {}

```


* NaN的bug

```
[Unknown process name] Error: this application, or a library it uses, has passed an invalid numeric value (NaN, or not-a-number) to CoreGraphics API and this value is being ignored. Please fix this problem.
[Unknown process name] If you want to see the backtrace, please set CG_NUMERICS_SHOW_BACKTRACE environmental variable.

可以在菜单: Product -> Scheme -> Edit Scheme.  "Run" 选项里, 找到 "Arguments" , 然后在 "Environmental Variables" 一行, 添加CG_CONTEXT_SHOW_BACKTRACE （或 CG_NUMERICS_SHOW_BACKTRACE等 ， 看你运行时候的提示而定 ）并且把数值设置为 YES.

```

* 符号表相关

```
1. nm -a a.framework  //查看导出符号表
2. lipo -info a.lib   //查看支持的架构
3. file libsamb.a     //查看是动态库还是静态库
4. strings app        //查看符号表

```

* iOS 队列

##### 1.dispatch group

```

dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0); dispatch_group_t group = dispatch_group_create();
// Add a task to the group 
dispatch_group_async(group, queue, ^{
     // Some asynchronous work
});

// Do some other work while the tasks execute.

// When you cannot make any more forward progress, 
// wait on the group to block the current thread. 
dispatch_group_wait(group, DISPATCH_TIME_FOREVER);

// Release the group when it is no longer needed. 
dispatch_release(group);

```

##### 2. NSOperation

```
self.con_queue = [[NSOperationQueue alloc] init];
self.con_queue.maxConcurrentOperationCount = BATCH_CONCURRENT_COUNT;

[self.con_queue addOperationWithBlock:^{
	//do some task
}];

[self.con_queue cancelAllOperations];

```

##### 3. 异步变同步(group)

```
- (NSInteger)methodSync {
    NSLog(@"methodSync 开始");
    __block NSInteger result = 0;
    dispatch_group_t group = dispatch_group_create();
    dispatch_group_enter(group);
    [self methodAsync:^(NSInteger value) {
        result = value;
        dispatch_group_leave(group);
    }];
    dispatch_group_wait(group, DISPATCH_TIME_FOREVER);
    NSLog(@"methodSync 结束 result:%ld", (long)result);
    return result;
}

```

##### 4.异步变同步（signal）

```
- (NSInteger)methodSync {
    NSLog(@"methodSync 开始");
    __block NSInteger result = 0;
    dispatch_semaphore_t sema = dispatch_semaphore_create(0);
    [self methodAsync:^(NSInteger value) {
        result = value;
        dispatch_semaphore_signal(sema);
    }];
   // 这里本来同步方法会立即返回，但信号量=0使得线程阻塞
   // 当异步方法回调之后，发送信号，信号量变为1，这里的阻塞将被解除，从而返回正确的结果
    dispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);
    NSLog(@"methodSync 结束 result:%ld", (long)result);
    return result;
}

```

##### 5.利用group实现异步while循环

```
    for billId in bills.keys {
        group.enter()
        print("Entering")
        Database.database().reference().child("bills").child(billId).observeSingleEvent(of: .value, with: { (snapshot) in
            guard let bill = snapshot.value as? [String: AnyObject] else {
                return
            }
            if let amount = bill["amount"] as? Double {
                runningTotal += amount
            }
            group.leave()
            print("Leaving")
        })
        group.wait()
    }
    completion(runningTotal)

```

##### 6.auto release pool 与 loop

```
while ([rs next]) {
    @autoreleasepool {
        NSDictionary *dict = [self dictFromXX];
        //...
    }
}

或者-------------
@autoreleasepool {
    while ([rs next]) {
        NSDictionary *dict = [self dictFromXX];
        //...
    }
}

```

##### 7.多线程信号量编程时注意的点

```
1.要注意signal loop的退出问题，外部退出，内部退出。
2.要注意signal loop的线程阻塞问题。在有信号量的loop内，具体任务要在新线程来做，防止线程阻塞。
3.要注意线程安全问题。

```


##### 8.打出崩溃日志

```
static NSUncaughtExceptionHandler *previousUncaughtExecptionHandler;

static void UncaughtExceptionHandler(NSException *exception) {
     NSArray *arr = [exception callStackSymbols];
     NSString *reason = [exception reason];
     NSString *name = [exception name];
   
     NSString *content = [NSString stringWithFormat:@"name:\n%@\nreason:\n%@\ncallStackSymbols:\n%@",
                   name,reason,[arr componentsJoinedByString:@"\n"]];
    NSTimeInterval tv = [[NSDate date] timeIntervalSince1970];
    NSString *fileName = [NSString stringWithFormat:@"exception_%f", tv];
    NSString *path = [Util getDocumentPath];
    path = [path stringByAppendingPathComponent:fileName];
    [content writeToFile:path atomically:YES encoding:NSUTF8StringEncoding error:nil];
    
    //执行其它sdk异常处理函数
    if (previousUncaughtExecptionHandler) {
        previousUncaughtExecptionHandler(exception);
    }
}

- (void)registerUncaughtExceptionHandler {
    previousUncaughtExecptionHandler = NSGetUncaughtExceptionHandler();
    NSSetUncaughtExceptionHandler(&UncaughtExceptionHandler);
}

```