Node Debug:

```

1.ulimit -c        查看内存转储是否有效
2.ulimit -c unlimited		开启内核转储，当开启内核转储后，如果出现内存错误，则会自动将错误储存到同目录下的文件中。
3.ulimit -c 14324214		设置内核转储上限
4.file		文件类型说明
5.gdb -c corefile ./a   显示可执行文件a的转储文件corefile中的错误信息
6.On Mac OS X, dump file will be placed in /cores/ as core.PID

7.设置核心转储文件的位置－－－－
	sudo vim /etc/sysctl.conf
		kernel.core_pattern = /var/core/%t-%e-%p-%c.core
		kernel.uses_pid = 0
	sudo sysctl -p
	
8.Debug 命令－－－－－
gcc -Wall -o2 -g	//加入调试信息

b main		//b 函数名； b 行号； b 文件名：行号；b 文件名：函数名；b +偏移量； b -偏移量; b *地址；

info b	//断点信息

run -a //运行 参数

bt		//显示堆栈： bt N; bt -N; 

p *a   //显示变量： p argv; p argv[0]; p *argv; 

info reg		//显示寄存器的值

p &eax  //在寄存器前添加$，可以显示寄存器的内容

p/x a	//按格式输出。x十六; d十; u无符号十; o八; t二进制; a地址; c字符; f浮点; s字符串; i机器语言;

x/x &pc  //显示内存内容 x/(格式) 地址：(x,d,u,o,t,a,c,f,s,i) 

n		//下一行（next）

c		//继续 (continue)

c 5		//continue 5 times

watch short_output	//监视变量改变,发生变化时暂停  
awatch short_output	//被访问，改变时暂停
rwatch short_output	//被访问时暂停

delete  //删除断点

set variable options = 0 //改变变量的值 

generate-core-file	//调试过程中执行转储

attach 17606 //进程id  ，调试一个已经运行的进程

------------
b 20 if node==0		//设置条件断点
row==4 && col==1     //在xcode中设置断

condition 断点编号		//删除触发条件

condition 断点编号 条件	//添加触发条件

ignore 断点编号 次数  //忽略指定的次数

--------
continue 次数
step 次数
stepi 次数
next 次数
nexti 次数

-----------
finish		执行完当前函数后暂停
until
until 地址

-----------
clear
clear  函数名
clear	行号
clear	文件名：行号
clear	文件名：函数名
delete	断点编号

－－－－－－－－
格式：
disable				//禁用全部
disable 断点编号		//
disable display	显示编号	//display命令定义的
disable mem	内存区域	//mem命令定义的

-------------
enable 
enable  断点编号
enable once 断点编号
enable delete 断点编号
enable display 显示编号
enable mem 内存区域
```


命令行调试
---

```

1. 在代码中写入debugger; 就会在该处中断

2. 运行调试
$ node inspect app.js 

3.继续
debug> cont //c

4.进入交互环境
debug> repl

5.下一行
debug> next //n

6.退出
debug> .exit

7.进入
debug> step //s

8.出来
debug> out //o


```


设置断点
---

```
setBreakpoint(), sb() - 在当前行上设置断点。
setBreakpoint(line), sb(line) - 在特定行上设置断点。
setBreakpoint('fn()'), sb(...) - 在函数体的第一个语句上设置断点。
setBreakpoint('script.js', 1), sb(...) - 在 script.js 的第一行设置断点。
clearBreakpoint('script.js', 1), cb(...) - 清除 script.js 中第一行的断点

比如：
debug> setBreakpoint('mod.js', 22)

```

信息
---

```
backtrace, bt - 打印当前执行帧的回溯。
list(5) - 列出具有 5 行上下文的脚本源代码（前后各 5 行）。
watch(expr) - 将表达式添加到监视列表。
unwatch(expr) - 从监视列表中移除表达式。
watchers - 列出所有监视器及其值（在每个断点上自动列出）。
repl - 在调试脚本的上下文中打开调试器的 repl 以进行运行。
exec expr - 在调试脚本的上下文中执行表达式。

```

执行控制
---

```
run - 运行脚本（在调试器启动时自动运行）。
restart - 重启脚本。
kill - 杀死脚本。

```


杂项
---

```
scripts - 列出所有已加载的脚本。
version - 显示 V8 的版本。

```


在chrome中调试
---

```
node --inspect app.js

在chrome中打开：
chrome://inspect

```



