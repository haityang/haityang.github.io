

1. class-dump 
提取框架中的头文件：  
class-dump -H -o /Users/iSwear/Desktop/headFold /Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS2.0.sdk/System/Library/PrivateFrameworks/Calendar

2. otool:查看应用程序是否连接了私有框架
查看应用程序连接的共享库：  
otool -L /Users/iSwear/Library/Developer/Xcode/DerivedData/BigGangGame-ainrwhwzxvzgkkftlisdjcycgpif/Build/Products/Debug-iphoneos/BigGun.app/BigGun

---------------------------------------

1. macport 得到原代码

sudo port -v extract zlib  
ls $(port dir zlib)  
ls \$(port dir zlib)/work  
ls \$(port dir zlib)/work/zlib-1.2.3  
cat \`port file port_name\` //查看用macport 安装到系统上的文件  

---------------------------------------

1. mac locate
sudo /usr/libexec/locate.updatedb

---------------------------------------

1. 用nslookup程序查询MX记录:  
$ nslookup  
> set type=mx
> 163.com

---------------------------------------

1. 用dig程序查询MX记录:http://www.isc.org/software/bind  
dig 163.com mx 

---------------------------------------

1. 用host程序查询MX记录:  
host -t mx 163.com

---------------------------------------

1. 命令行发送邮件：  
mail -s hi -F haityang@live.cn

---------------------------------------

1. //查找
find / -name httpd.conf  
find /etc -name '*srm*'  
find / -amin -10 #查找在系统中最后10分钟访问的文件  
find / -atime -2 #查找在系统中最后48小时访问的文件  
find / -empty #查找在系统中为空的文件或者文件夹  
find / -group cat #查找在系统中属于groupcat的文件  
find / -mmin -5 #查找在系统中最后5分钟里修改过的文件  
find / -mtime -1 #查找在系统中最后24小时里修改过的文件  
find / -nouser #查找在系统中属于作废用户的文件  
find / -user fred #查找在系统中属于FRED这个用户的文件  

---------------------------------------

1. mount  //查看当前挂载的文件系统类型  
df	//查看当前的文件系统情况

---------------------------------------

1. nm：列出目标文件中的符号。
2. objdump：显示目标文件中的详细信息。
3. readelf：显示关于 ELF 目标文件的信息。

4. objdump -d a.out
5. readelf -all a.out
6. readelf --debug-dump a.out | less

---------------------------------------

1. 挂载afp文件系统  
sudo mount -t afp afp://user:pass@idisk.mac.com/user /Volumes/idisk

2. 挂载ssh文件系统  
sudo port install sshfs  
sshfs mobile@192.168.1.101: ~/Media  
fusermount -u ~/Media  //取消挂载

---------------------------------------

1. afpcmd  轻量的afp客户端  
afpcmd  
connect afp://iSwear:waiting@192.168.1.102  
ls  
cd HumanTower  
ls  
get manyaojd.mp3  
disconnect  
quit  

---------------------------------------

1. //convert wav to caf
1. afconvert -f caff -d LEI16@44100 -c 1 in.wav out.caf
2. nc //net cat

---------------------------------------

1. MacPorts can down unix software automatically  
cd MacPorts-1.9.2  
./configure && make && sudo make install  
sudo port -v selfupdate  
port upgrade outdated  
sudo port selfupdate   

搜索索引中的软件 
port search app_name 

安装新软件 
sudo port install app_name 

卸载软件 
sudo port uninstall app_name 

查看outdated的软件以及版本 
port outdated 

升级outdated的软件 
sudo port upgrade outdated

---------------------------------------

1. Fink source can down unix software automatically  
./bootstrap

---------------------------------------

* convert rose.jpg rose.png

---------------------------------------
* 转换mov到gif  
ffmpeg -i clip-2010-12-08\ 08\;43\;23.mov -s sqcif -pix_fmt rgb24  yht.gif

---------------------------------------

* tcpdump -i eth0 src host 192.168.0.5  //在作为网关的主机上，想知道本地网络中IP地址为192.168.0.5的主机现在与外界通信的情况

---------------------------------------

1. nmap -sP 192.168.0.1//这台主机是否下线了？用Nmap探测试试看
2. nmap -sP 192.168.0.0/24 //24表明目标是一个网络而非单个主机,知道目的网络究竟有多少主机处于运行状态：
3. nmap 192.168.0.5//想要了解该主机的详细信息，可以执行
4. nmap -O 192.168.0.5  //强大的Nmap本身就可以依据TCP/IP的指纹特征猜测对方使用的操作系统。我们可以用-O来开启这一选项

---------------------------------------

* Netstat主要用于Linux/Unix主机察看自身的网络状况，如开启的端口、在为哪些用户服务以及服务的状态等等
1. netstat -r    //Netstat还可以方便地代替route命令显示当前核心路由表
2. netstat -i       //它还可以代替ifconfig显示网络接口状态
3. telnet 192.168.1.138 8000           //telnet登录到某台主机
4. sudo tcpdump -v -i en0 -A  port 80  //显示http信息

---------------------

1. TCPDUMP DOWNLOAD: 

* To download TCPdump:  ----------

	apt-get install tcpdump


* To see the TCPdump dependencies:--------------

	apt-cache depends tcpdump	
	tcpdump    
	Depends: libc6    
	Depends: libpcap0.8    
	Depends: libssl0.9.8  


* To see the installed TCPdump version:--------------

	apt-cache policy tcpdump
	tcpdump:    
	Installed: 3.9.4-2ubuntu0.1    
	Candidate: 3.9.4-2ubuntu0.1    
	Version table:   *** 3.9.4-2ubuntu0.1 0             
	500 http://security.ubuntu.com dapper-security/main Packages            
	100 /var/lib/dpkg/status          
	3.9.4-2 0             
	500 http://ch.archive.ubuntu.com dapper/main Packages 


* TCPDUMP SYNTAX--------------
	Syntax:
	Protocol Direction Host(s) Value Logical Operations
	
	Other expression
	Example:
	tcp dst 10.1.1.1 80 and tcp dst 10.2.2.2 3128
	
	Protocol:
	Values: ether, fddi, ip, arp, rarp, decnet, lat, sca, moprc, mopdl, tcp and udp.
	If no protocol is specified, all the protocols are used. 
	
	Direction:
	Values: src, dst, src and dst, src or dst
	If no source or destination is specified, the "src or dst" keywords are applied. 
	For example, "host 10.2.2.2" is equivalent to "src or dst host 10.2.2.2".
	
	Host(s):
	Values: net, port, host, portrange.
	If no host(s) is specified, the "host" keyword is used.
	For example, "src 10.1.1.1" is equivalent to "src host 10.1.1.1". 
	
	Logical Operations:
	Values: not, and, or.Negation ("not") has highest precedence. 
	Alternation ("or") and concatenation ("and") have equal precedence and associate left to right.
	For example,"not tcp port 3128 and tcp port 23" is equivalent to "(not tcp port 3128) and tcp port 23".
	"not tcp port 3128 and tcp port 23" is NOT equivalent to "not (tcp port 3128 and tcp port 23)".


TCPDUMP USE 
----------

* To display the Standard TCPdump output:--------------

####tcpdump
	tcpdump: verbose output suppressed, use -v or -vv for full protocol decode listening on eth0, 
	link-type EN10MB (Ethernet), capture size 96 bytes192.168.1.2.1034: UDP, length 36  


* To display the verbose output:--------------
####tcpdump -v
	tcpdump: listening on eth0, link-type EN10MB (Ethernet), capture size 96 bytes 27014: UDP, length 53  


* Network interfaces available for the capture:--------------
####tcpdump -D
	1.eth0 2.any (Pseudo-device that captures on all interfaces) 3.lo



* To display numerical addresses rather than symbolic (DNS) addresses:--------------
####tcpdump -n
	tcpdump: verbose output suppressed, use -v or -vv for full protocol decode listening on eth0, link-type EN10MB (Ethernet), capture size 96 bytes  


* To display the quick output:--------------
####tcpdump -q
	tcpdump: verbose output suppressed, use -v or -vv for full protocol decode listening on eth0, link-type EN10MB (Ethernet), capture size 96 bytes  



* Capture the traffic of a particular interface:--------------
####tcpdump -i eth0



 * To capture the UDP traffic:--------------
####tcpdump udp


 * To capture the TCP port 80 traffic:--------------
####tcpdump port http


 * To capture the traffic from a filter stored in a file:--------------
####tcpdump -F file_name



* To stop the capture after 20 packets: --------------

####tcpdump -c 20


* To send the capture output in a file instead of directly on the screen:--------------

####tcpdump -w capture.log


* To read a capture file:--------------
 
####tcpdump -r capture.log


* reading from file capture.log, link-type EN10MB (Ethernet)--------------


####tcpdump host www.openmaniak.com


 * To display the FTP packets coming from 192.168.1.100 to 192.168.1.2: --------------

####tcpdump src 192.168.1.100 and dst 192.168.1.2 and port ftp


* To display the packets content: --------------

####tcpdump -A

-------------------------------

//the -A flag makes it display the packets' contents as text
//-s0 makes it capture entire packets not just the headers

```
sudo tcpdump -v -A -s0 -ien0  src 10.2.6.87 or dst 10.2.6.87
sudo tcpdump -v -A -i en0 src 192.168.1.198 and dst 192.168.1.179 and port 8000//监视回来的http包的详细信息
sudo tcpdump -w a.log  -i en0 src 10.2.6.87 or dst 10.2.6.87 //存日志
//转UTF8显示, 
sudo tcpdump -vv -A -r a.log | iconv -c -f utf-8 -t cp1251 >a 

```


-----

计算代码行数
wc -c a.txt   //计算字符数
wc -l a.txt    //   20628 total

-------


net use x: \\vboxsvr\sharename          mac host ,windows guest下,windows端用命令挂载共享文件夹.

------

awk数值计算
echo | awk '{print 19+7}'

-----

–expr用法实例讲解

Gnuplot 是一种免费分发的绘图工具
gnuplot   //打开plot
h          //帮助
plot sin(x)       //画曲线
reset              //重置

------

==================================================
unix 数学计算命令

第七章数学计算命令
[语法]: bc [-c] [-l] [文件...][说明]: bc是一个交互式的高精度计算工具，采用类似于C语言的语法，能够从指定文件指定文件中读出命令执行，然后再进入交互式执行，
事实上，bc是dc的预编译器，它自动激活dc，将语句经预编译后传递给dc，退出bc的命令是quit，bc中的ibase，obase，scale分别表示输入基数，输出基数，小数点右边的位数。
-c bc 只编译，而不将编译结果送dc，将其送到标准输出上-l 预定义一个数学函数库，
可在bc中使用以下函数s(x) sinec(x) cosinee(x) exponentiall(x) loga(x) arctangentj(n，x) Bessel


==============================================
更新路径数据库的
####sudo /usr/libexec/locate.updatedb


=============================================
mplayer 

1.重复播放  
mplayer -loop 0 qingdaocaoyuanlai.mp3

=============================================
rename
1.批量改名. 把-hd.*的文件批量改名为-ipd.*
ls -l *-hd.*|awk '{m=$9; gsub(/-hd./,"-ipd.",$9);print "mv "m " "$9}'|sh

2.批量删除。 把不包含-hd.的文件都删除掉
find . ! -name "*-hd.*" -exec rm -f {} \;


ls -l *.jpg|awk '{m=$9; gsub(/.jpg/,"-ipd.jpg",$9);print "mv "m " "$9}'|sh

3.删除某行，包含字符串
sed '/ABCD/d' file1 >file2



vc6 配置 OpenGL：    
-----   

第一步：选择一个编译环境      
第二步：安装GLUT工具包    
    Windows环境下的GLUT下载地址 http://user.xmission.com/~nate/glut.html  

    Windows环境下安装GLUT的步骤：    
            glut32.dll to %WinDir%\System, 
            glut32.lib to $(MSDevDir)\..\..\VC98\lib, and 
            glut.h     to $(MSDevDir)\..\..\VC98\include\GL.

第三步，创建工程，其步骤如下
   1、创建一个Win32 Console Application。
   2、Project菜单-》C/C++-》Preprocessor definitions 中的_CONSOLE改为__WINDOWS。  


第四步，创建一个最简单的opengl程序
1、在stdafx.h文件中加入：

```
#include <windows.h>
#include <GL/glu.h>
#include <GL/gl.h>
#include <GL/glut.h>
#include <GL/glaux.h>   
```


2、在工程主程序中加入：（以我的程序为例，在simpleGL.cpp中）

```
//Called to draw scene
void RenderSence(void)
{
    //Clear the window with current clearing color
    glClear(GL_COLOR_BUFFER_BIT);
    //Flush drawing commands
    glFlush();
}

//Set up the rendering state
void SetupRC(void)
{
    glClearColor(0.0f,0.0f,1.0f,1.0f);      //此时背景色为蓝色
}

int main(int argc, char* argv[]) 
{
    glutInitDisplayMode(GLUT_SINGLE|GLUT_SINGLE|GLUT_RGB);
    glutCreateWindow("Simple");
    glutDisplayFunc(RenderSence);
    SetupRC();
    glutMainLoop();
}
```



制作ipa文件
-----

```
1: 在桌面上创建文件夹working，打开 working文件夹，并在里面新建文件夹Payload（注意大小写）
2: 复制刚才创建好的 iTunesArtwork(用一个小的png文件修改而来) 件到working文件夹里，同时复制XXXX.app文件夹到Payload文件夹里
3: 用xcode打开 XXXX.app目录里的Info.plist文件, 在段的最后加入下面的一行键值对,
SignerIdentity 					Apple iPhone OS Application Signing
4: 选择iTunesArtwork文件和Payload文件夹，右击选择 “添加到档案文件”，选择压缩文件格式为 ZIP，重命名文件为XXXX.zip, 按确定开始压缩
5: 重命名压缩文件为 XXXX.ipa
6: 双击ipa文件，并导入iTunes

```


http://dns.v2ex.com
 ~/Library/Preferences/com.apple.Terminal.plist
banner jacky

====================================

OpenSSL
------

```

1、为CA创建一个RSA私钥
openssl genrsa -des3 -out ca.key 1024

2、利用CA的RSA私钥创建一个自签名的CA证书
openssl req -new -x509 -days 3650 -key ca.key -out ca.crt -config /opt/local/etc/openssl/openssl.cnf

3、.pfx格式转成PEM格式
openssl pkcs12 -in test.pfx -out test.pem -nodes

4..cer到.pem的转换
openssl x509 -in test.cer -out test.pem

5.要使用64位编码打包二进制文件成文本文件，输入
openssl base64 -e -in test -out t.bin

6.要打开64位编码的文本文件
openssl base64 -d -in t.bin -out a.txt

7.对短字符串进行编码
echo "The Linux Journal" | openssl base64 

8.解码：
echo "VGhlIExpbnV4IEpvdXJuYWwK" | openssl base64 -d

9.sha1摘要
openssl sha1 filename 


10.md5摘要
openssl md5 filename

11.aes 加密
openssl enc -aes-128-cbc -in test -out filename.aes-128-cbc

12.aes解密
openssl enc -d -aes-128-cbc -in filename.aes-128-cbc > filename

13.OpenSSL能创建非常强壮的随机密语： 
openssl rand 15 -base64 

14.生成一个影子密码。（shadow password）密码的摘要
openssl passwd -1 



openssl加解密
1. 使用aes-128-cbc算法加密文件：
openssl enc -aes-128-cbc -in install.log -out enc.log

2. 解密刚刚加密的文件：
openssl enc -d -aes-128-cbc -in enc.log -out install.log

3.对文件file.tar.gz进行加密，密码为123456
openssl des3 -salt -k 123456 -in file.tar.gz -out file.tar.gz.des3

4.对file.tar.gz.des3 解密
openssl enc -des3 -d -in file.tar.gz.des3 -out file.tar.gz

cat in.log | openssl enc -base64 -d |openssl aes-128-cbc -d 


5.Openssl支持的加密算法有：
-aes-128-cbc -aes-128-cfb -aes-128-cfb1
-aes-128-cfb8 -aes-128-ecb -aes-128-ofb
-aes-192-cbc -aes-192-cfb -aes-192-cfb1
-aes-192-cfb8 -aes-192-ecb -aes-192-ofb
-aes-256-cbc -aes-256-cfb -aes-256-cfb1
-aes-256-cfb8 -aes-256-ecb -aes-256-ofb
-aes128 -aes192 -aes256
-bf -bf-cbc -bf-cfb
-bf-ecb -bf-ofb -blowfish
-cast -cast-cbc -cast5-cbc
-cast5-cfb -cast5-ecb -cast5-ofb
-des -des-cbc -des-cfb
-des-cfb1 -des-cfb8 -des-ecb
-des-ede -des-ede-cbc -des-ede-cfb
-des-ede-ofb -des-ede3 -des-ede3-cbc
-des-ede3-cfb -des-ede3-ofb -des-ofb
-des3 -desx -desx-cbc
-rc2 -rc2-40-cbc -rc2-64-cbc
-rc2-cbc -rc2-cfb -rc2-ecb
-rc2-ofb -rc4 -rc4-40

```



====================================
sudo /Developer/Library/uninstall-devtools –mode=all





====================================
4. bzip -d *.bz
5. bzip -d *.gz

6. tar -xjvf a.tar.bz2

----------
unzip:

1. tar -cvf *.tar directory/
2. tar -czvf *.tar.gz direcroty/

================================== 


vi command: 
----

```

1. u         --undo 

2. ctrl-r    --redo 

3. zz        --write file and exit 
 
4. :help    --help  

5. :help x    --help x command 

6. Ctrl-u 
 
7. Ctrl-d    --scroll half screen 

8. Ctrl-u 

8. cw        --change a word  

9. 5ra        --replace 5 character with a  

10.vi file    --edit another file 

11 vi f1 f2    --open mult-file 

11. args        --look current file 

12. previous    --previous file 

13. next    --next file 

14. split    --open a split window  

15.ctrl-wj    --bottom window 

16. ctrl-wk    --top window 

17. split f2    --split window and open file 2 

18. split new    --split window and new a file 

19. %        --match pair 

20. >%        --shift a block of text 

30. i}        --inner } 

31. K        --open man page 

32. ctags *.c        --produce tag file (for function location ) 

33. :tag function    --goto function 

34. ctrl-]        --goto function at cursor position 

35. :tags        --show the list of the tags 

36. ctrl-t        --go back the preceding tag. 

33. 2ctrl-t        --go back preceding for 2 jump 

34. stag function    --split and show new function 

35. ctrl-w]        --split current window and jump to tag under the cursor in the uppper window 

36. :tag/write    --finding a procedure when you only know part(here is write) of name 

37. :tag/^read    --procedure begin with read 

38. :tag/DoFile\|do_file\|Do_File        --not sure procedure is DoFile, do_file or Do_file. 

39. tselect name        --can select different tag. 

40. g[            --does a tselect command on cursor 

41. :2 tnext        --go to next tag 

42. :2 tprevious    --go to the previous tag 

43. :2 trewind    --goto the first tag 

44. :2 tlast        --goto the last tag. 

45. stselect        --split window, and tselect 

46. set list        --put vim in list mode 

46. set nolist    --close list mode 

47. :make         --make a file in vim 

48. :cnext        --goto next error 

49. :cc        --display current error 

50. :clist        -- display error list 

51. clist 3,5        --list error 3 through 5 

52 clist ,5        --list error 3 throught 5 

53 clist 5,        --list error 5 to the end 

54 clist!        --list all 

55 cquit        --exit without recompilation 

56 grep -w ground_point *.c        --find occurences of the variable[-w full words only, cnext, cprvious, cc to navigator] 

57 cnfile        --goto first error of next file 

58 :abbreviate ad advertisement    --define the abbreviation

59 :%s/FR_HTABITEMWND/FR_HWND/g    --replace

60. ps -ef |grep fx        --查看当前进程号

61. < 2j        --向左移下面两行 
62. :set fileformat=unix

```



ubuntu配置：
----

```

1.配置g++:sudo apt-get install build-essential

2.配置gtk: 

sudo apt-get install gnome-core-devel

3.配置gtk 开发相关文档：

sudo apt-get install libglib2.0-doc libgtk2.0-doc

sudo apt-get install devhelp

sudo apt-get install glade-gnome glade-common glade-doc

```


linux权限管理
----

```
1. ls -l        --display property

2. chgrp ting cmpc -Rf    --change group to ting.

3. chown ting cmpc -Rf    --change author to ting

3. chmod u[g|o|a] +[-|=] r[w|x] directory    --user, group, others, all; +add, -remove, =set; read, write, execute, 

4. chmod 777 cmpc        --owner = 4+2+1; group = 4+2+1; thers = 4+2+1;

5. chmod o-rwx cmpc -Rf        --others remove read,write, and execute.
```

==============================================

1. valgrind --tool=memcheck --leak-check=yes ./example        --detact memory leak

===================================================

GTK:

1. pkg-config --cflags --libs gtk+-2.0        ----- 显示头文件目录


2. g++ -o simple simple.cc `pkg-config --cflags --libs gtkmm-2.4`


3. gcc -o simple simple.cc `pkg-config --cflags --libs gtk+-2.0`


4. pkg-config gtk+-2.0 --modversion        ---查看版本


5. gcc -o fx fxframe.c `pkg-config --cflags --libs libglade-2.0` -L. -lfpdfapi5


6. gdk-pixbuf-csource --raw  --name=a20  a20.bmp  >>ad.h    ---将图片资源生成c文件

    [use gdk_pixbuf_new_from_inline() to open]

======================================================

GDB:

1. bt            --查看堆栈
2. debuginfo-install gtk2-engines.i386

=======================================================

convert About.png A.xpm            ---将图片资源生成c文件

=======================================================

modprobe e100

vim /etc/modprobe.d/modprobe.conf.dist

vim /etc/modprobe.conf

service network restart

depmod -ae

vim ifcfg-eth0

mv ifcfg-eth1 ifcfg-eth0

cd /etc/sysconfig/network-scripts/

vim ifcfg-eth0

---------------

=================================================================

1.ldd fx            //查看应用软件依赖库


2. find /etc -name *pass*

=================================================================

1. ps -ef |grep fx


2. kill -9 进程号



====================================================

traceroute www.baidu.com
netstat --raw

netstat -r

smba://192.168.0.210

====================================

uname -r



======================================
 afconvert -f caff -d LEI16@44100 -c 1 in.wav out.caf  //convert wav to caf
 

==========================================
fc-list - list available fonts 

=============================================
Type the following two command to install both ssh client and server:

``` 
# sudo apt-get install openssh-server openssh-client

```

挂载
----


```
1.挂载光盘镜像:

#mount  -t  iso9660 -o loop  /tmp/cd.iso  /mnt/cdrom;

2.挂载光盘:

#mount -t  iso9660  /dev/cdrom   /mnt/cdrom

3.映射windows上的资料到LINUX上:

#mount  -t  smbfs  -o username=administrator/test.gz (用户名/域名),password=密码   //192.168.0.130/fold(windowsserver 名/分享的资料夹名)  /mnt/esx

4.挂载目录

#mount  --bind  /etc/vmfs  /mnt/vpc

5.挂载U盘

#mount -o iocharset=utf8(gb2312)  /dev/sda1  /mnt/usb

6.挂载本地FAT32分区并显示中文

#mount -t vfat -o iocharset=cp936  /dev/hda  /mnt/win

7. 卸载挂载了的目录

#umount  /mnt/cdrom


```



sqlite:
----

sqliteman
select * from tarea where Attr="省/直辖市";
select * from tarea where Attr="地级市" and AreaCode like "150___";
select * from tarea where Attr="县" and AreaCode like "1502__";


========================================
简单http服务器:
$ cd /home/somedir
$ python -m SimpleHTTPServer

=====================================================
安装pip   python包管理
https://pip.pypa.io/en/latest/installing.html
1.download get-pip.py. 
2.python get-pip.py
更新pip
pip install -U pip


python学习
----

```
1.python3 setup.py sdist  //构建一个发布文件
2.sudo python3 setup.py install //将发布安装到本地副本中
3.python3 setup.py register //注册
4.python3 setup.py sdist upload //上传

```

Homebrew安装
----

```
Get Command Line Tools
xcode-select --install

安装 Homebrew 很简单，只需在终端上输入一行 Ruby 脚本（所以要先搭建 Ruby 运行环境，Mac 下已经预装了 Ruby）就行：
ruby -e "$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)"

Homebrew使用
Homebrew 跟 Ubuntu 的里的 apt-get 一样，update是更新软件包列表，install是安装软件包，uninstall是卸载软件包，用法都差不多，熟悉 apt-get 使用的话是很容易上手。
下面是 Homebrew 的一些常用操作（package替换成你想安装的软件名，例如：nginx，就能正常安装你想要安装的软件）：

显示帮助信息
brew -h

Homebrew的版本
brew -v

列出Homebrew的建议或警告信息
brew doctor

列出已安装的软件包
brew list

更新Homebrew软件包
brew update(up)

用浏览器打开package主页（package 为空则打开 Homebrew 主页）
brew home package

显示软件包内容信息
brew info package

显示包依赖
brew deps package

查找有没有想要安装的软件包（支持模糊查找）
brew search <package-name>

查看软件包的信息
brew info <package-name>

软件包的安装选项
brew options package

安装软件包
brew install package

如果想查看安装过程中执行的命令或者是编译信息，可以在 "install" 后面加一个 "-v" 参数：
brew install -v <package-name>

brew remove <package-name>

卸载软件包
brew uninstall(remove) package

用 Homebrew 安装第三方工具软件包，例如用 homebrew 安装官方缺省的php
brew tap josegonzalez/php

如果软件包出了新版本，可以用 upgrade 更新过时的软件包（缺省 package 参数，则为全部更新）：
brew upgrade package

清理之前安装的旧版本数据：
brew cleanup --force -s
rm -rf $(brew --cache)

更多详细的用法说明可以在终端输入"man brew"查看。
PS：Mac 下类似 Homebrew 的软件管理工具还有 MacPorts、Fink。


切换USTC源：https://lug.ustc.edu.cn/wiki/mirrors/help/brew.git
1.  更换brew.git的源
cd "$(brew --repo)"
git remote set-url origin https://mirrors.ustc.edu.cn/brew.git
2. 更换homebrew-core.git的源
cd "$(brew --repo)/Library/Taps/homebrew/homebrew-core"
git remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git

brew update
3. 还需要更换Homebrew Bottle源
vi ~/.bash_profile
export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles


重置官方源：
cd "$(brew --repo)"
git remote set-url origin https://github.com/Homebrew/brew.git

# 重置homebrew-core.git:
cd "$(brew --repo)/Library/Taps/homebrew/homebrew-core"
git remote set-url origin https://github.com/Homebrew/homebrew-core.git



```

=============================================
代理抓包
Charles
代理端口：5389 //需要同时在iphone，charles中设置。
ip为本机ip,用户名密码为自己的上网用户名密码

打开Charles程序
查看Mac电脑的IP地址，如192.168.1.7
打开iOS设置，进入当前wifi连接，设置HTTP代理Group，将服务器填为上一步中获得的IP，即192.168.1.7，端口填5389



==========================================================
fink
1. fink install nedit		//install
2. dpkg --remove			//remove
3. fink update-all 			//update-all
4. fink list            - list all packages
5. fink list bash       - check if bash is available and what version
6. fink list "gnome*"   - list all packages that start with 'gnome'
7. /sw/bin/fink list objdump


============================================================================
磁盘管理
diskutil list
diskutil unmountDisk /dev/disk4
sudo dd bs=1m if=2014-09-09-wheezy-raspbian.img of=/dev/disk4


-------------------------------------
segue传值
- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender
{
    if ([segue.identifier isEqualToString:@"DetailViewControllerSeque"])
    {   
    	DetailViewController *detailViewController = [segue destinationViewController];  
        detailViewController.detailDescriptionText.text = @"a string";    
    }
}

pragma 注释
----------------------------

```

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-variable"
#pragma clang diagnostic pop

```



=======================================================
Intellij
1.全局查找： Ctrl+Shift+F
2.查找文件:  Ctrl+Shift+N
    
    address 172.16.157.81
    netmask 255.255.255.0
    gateway 172.16.157.251
    


windows下查看端口占用情况
netstat -ano | findstr "80" （注80是你想要看查看的端口号）




=====================================================
lldb:
p (char*) [requestHeadData bytes]		//输出 NSData 的内容

-------------

安装express
------------------

 /usr/local/lib/node_modules/express
 sudo npm install -g express //安装express
 sudo npm install -g express-generator //express 的命令行管理
 express -e myapp
 DEBUG=microblog:* ./bin/www  //运行microblog
 
--------
Error: Most middleware (like session) is no longer bundled with Express and must be installed separately. 
Please see https://github.com/senchalabs/connect#middleware.
solution:

-------
// sudo npm install session
// Then in your server.js script :
// var session = require(‘session’);
// app.use(session({...}));

------
sudo npm install express-session
var session = require('express-session');
var MongoStore = require('connect-mongo')(session);

----------------------------------------------------

安装mongodb
-----
brew install mongodb		//安装
sudo mkdir /data
sudo mkdir /data/db
sudo chown -R yht  /data	//使当前用户对/data有操作权限
mongod		//开启mongodb server
mongo		//进入mongodb client


纹理压缩
-----

https://developer.apple.com/library/ios/documentation/3DDrawing/Conceptual/OpenGLES_ProgrammingGuide/TextureTool/TextureTool.html
Xcode texturetool
cd /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/usr/bin/
./texturetool -h

------------------------------------
//Listing C-2  Encoding images into the PVRTC compression format
//Encode Image.png into PVRTC using linear weights and 4 bpp, and saving as ImageL4.pvrtc
./texturetool -e PVRTC --channel-weighting-linear --bits-per-pixel-4 -o ImageL4.pvrtc Image.png

//Encode Image.png into PVRTC using perceptual weights and 4 bpp, and saving as ImageP4.pvrtc
./texturetool -e PVRTC --channel-weighting-perceptual --bits-per-pixel-4 -o ImageP4.pvrtc Image.png

//Encode Image.png into PVRTC using linear weights and 2 bpp, and saving as ImageL2.pvrtc
./texturetool -e PVRTC --channel-weighting-linear --bits-per-pixel-2 -o ImageL2.pvrtc Image.png

//Encode Image.png into PVRTC using perceptual weights and 2 bpp, and saving as ImageP2.pvrtc
./texturetool -e PVRTC --channel-weighting-perceptual --bits-per-pixel-2 -o ImageP2.pvrtc Image.png

------------------------------------
//Encoding images into the PVRTC compression format while creating a preview
//Encode Image.png into PVRTC using linear weights and 4 bpp, and saving the output as ImageL4.pvrtc and a PNG preview as ImageL4.png
./texturetool -e PVRTC --channel-weighting-linear --bits-per-pixel-4 -o ImageL4.pvrtc -p ImageL4.png Image.png

//Encode Image.png into PVRTC using perceptual weights and 4 bpp, and saving the output as ImageP4.pvrtc and a PNG preview as ImageP4.png
./texturetool -e PVRTC --channel-weighting-perceptual --bits-per-pixel-4 -o ImageP4.pvrtc -p ImageP4.png Image.png

//Encode Image.png into PVRTC using linear weights and 2 bpp, and saving the output as ImageL2.pvrtc and a PNG preview as ImageL2.png
./texturetool -e PVRTC --channel-weighting-linear --bits-per-pixel-2 -o ImageL2.pvrtc -p ImageL2.png Image.png

//Encode Image.png into PVRTC using perceptual weights and 2 bpp, and saving the output as ImageP2.pvrtc and a PNG preview as ImageP2.png
./texturetool -e PVRTC --channel-weighting-perceptual --bits-per-pixel-2 -o ImageP2.pvrtc -p ImageP2.png Image.png




=========================================
配置apache php
1. vi /etc/apache2/httpd.conf 
LoadModule php5_module libexec/apache2/libphp5.so   //打开
2.sudo apachectl restart  //生效
3.sudo cp /etc/php.ini.default /etc/php.ini
4.cd /Library/WebServer/Documents/
5.sudo vi test.php
<?php
phpinfo();
?>
6.打开浏览器  http://localhost/test.php

=========================================
1.class-dump -H 携程旅行 -o h   //导出可执行文件的头文件
2.安装Theos
	1.export THEOS=/opt/theos
	2.sudo git clone git://github.com/DHowett/theos.git $THEOS
3.安装ldid, 用于app签名
	1.https://github.com/downloads/rpetrich/ldid/ldid.zip
	2.sudo cp ldid /opt/theos/bin/
4.sudo /opt/theos/bin/bootstrap.sh substrate
5.安装dpkg 用来制作deb包	
	1.sudo port selfupdate
	2.sudo port selfupdate
6.安装Theos NIC templates
	1.https://github.com/DHowett/theos-nic-templates/archive/master.zip
	2.cp *.tar $THEOS/templates/iphone		
7.建立Theos工程：
	1.$THEOS/bin/nic.p
	2.按提示操作即可
	3.make package	//生成deb包
	4.make package install
8.越狱
	1.iTools越狱
	2.重置下wifi网络
	3.加源 apt.weiphone.com  apt.178.com
	4.安装SBSettings
	5.安装Openssh
	6.安装MobileSubstrate, copy /Library/Frameworks/CydiaSubtrate.framework/CydiaSubstrate $THEOS/lib/libsubstrate.dylib
	7.安装GDB
	8.安装Cycript
	9.AppCrackr
	10.iFile
	11.Vi IMproved
	12.SQLite
	13.top
	14.syslogd
	15.MobileTerminal
	
9.集成Reveal
	1.将Reveal-iOS-SDK拷到工程目录下
	2.将Reveal.framework加到工程中
	3.将Build Settings中的Ohter Linker Flags设为-ObjC -lz -framework Reveal
	
		
==========================================
从1970年的时间换算：
date -r 526276800 +%m/%d/%y						//秒到日期
date  "+%s"  									//当前日期到秒
date -j -f "%Y%m%d %H%M" "20130122 1455" +%s	//特定日期到秒

==============================================
clang的编译， 用于分析block
clang tb.m -o t   //从源文件生成可执行文件
clang -rewrite-objc tb.m	//生成.m对应的cpp文件


------------------
打印出所有的时区名
 NSArray *zoneArrs = [NSTimeZone knownTimeZoneNames];
    NSLog(@"zoneArrs:%@",zoneArrs);
    
可以用该名来构建时区：NSTimeZone *timeZone = [[NSTimeZone alloc] initWithName:names];

-------------------------------

sdcv hello -0  //stardict 


==================================================

1 # 将文件下载到本地并命名为mygettext.html
2 curl -o mygettext.html http://www.gnu.org/software/gettext/manual/gettext.html
3 
4 # 将文件保存到本地并命名为gettext.html
5 curl -O http://www.gnu.org/software/gettext/manual/gettext.html
5 # 通过添加-C选项继续对该文件进行下载，已经下载过的文件不会被重新下载
6 curl -C - -O http://www.gnu.org/software/gettext/manual/gettext.html


-------------------------------
du -sh * 能罗列出来文件夹都有多大

react-native相关
----

1.npm安装，使用镜像
npm --registry=https://registry.npm.taobao.org --disturl=https://npm.taobao.org/dist install microtime
2.安装cnpm
npm install -g cnpm --registry=https://registry.npm.taobao.org
3.淘宝npm镜像
	1.通过config命令
		npm config set registry https://registry.npm.taobao.org 
		npm info underscore （如果上面配置正确这个命令会有字符串response）
	2.命令行指定
		npm --registry https://registry.npm.taobao.org info underscore 
	3.编辑 ~/.npmrc 加入下面内容
		registry = https://registry.npm.taobao.org
		
-------------------------------
react-native:
react-native init AwesomeProject
cnpm update //更新当前依赖

-------------------------------
查看当前运行端口：
lsof -Pnl +M -i4

-------------------------------
打码兔
print(u'\u54c8\u54c8')

--------------------------------
defaults write com.apple.CrashReporter DialogType none

--------------------------------


在模拟器中装一个app，只限（i386）的包 simulator
/Applications/Xcode.app/Contents/usr/bin/simctl  install booted demo.app
在模拟器中唤醒一个app
xcrun /Applications/Xcode.app/Contents/Developer/usr/bin/simctl openurl booted demo://h5.html

============================================================================
去掉UITableView多余分隔线
self.tableView.tableFooterView = [[UIView alloc] initWithFrame:CGRectZero];

=========================================
输出 document
po NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES)

========================================
define中的三个特殊符号：#，##，#@
-#define Conn(x,y) x##y
-#define ToChar(x) #@x
-#define ToString(x) #x

x##y表示什么？表示x连接y，举例说：
int n = Conn(123,456);   结果就是n=123456;
char* str = Conn("asdf", "adf")结果就是 str = "asdfadf";

再来看#@x，其实就是给x加上单引号，结果返回是一个const char。举例说：
char a = ToChar(1);结果就是a=1;
做个越界试验char a = ToChar(123);结果就错了;
但是如果你的参数超过四个字符，编译器就给给你报错了！error C2015: too many characters in constant   ：P

最后看看#x,估计你也明白了，他是给x加双引号
char* str = ToString(123132);就成了str="123132";



--------------------------------------------------------
Xcode工程数据
~/Library/Developer/Xcode/DerivedData

----------------------------------------------------
swift根据包生成工程
swift package generate-xcodeproj

docker:
-----

```
安装
sudo apt-get update
sudo apt-get install docker.io

--------
查看状态：
sudo service docker status

--------
sudo service docker start    #启动 
sudo service docker stop    #关闭 
sudo service docker restart #重启 

--------
下载docker 镜像，需要几分钟。
sudo docker pull ubuntu

启动容器，并且进入到Ubuntu容器的bash命令
sudo docker run -i -t ubuntu /bin/bash

--------
Docker常用命令速查
下载一个ubuntu镜像 
sudo docker pull ubuntu
 使用ubuntu运行一个交互性的shell,
 分配一个伪终端，附带stdin和stdout(输入/输出流) 
 如果你想退出分离出来的伪终端, 
 可以使用CTRL -p+CTRL -q --就像先按CTRL -p 然后CTRL -q 
sudo docker run -i -t ubuntu /bin/bash
docker ps命令
sudo docker ps #列出当前所有正在运行的container
sudo docker ps -l #列出最近一次启动的，且正在运行的container
sudo docker ps -a #列出所有的container
port命令

docker run -p 80:8080 <image> <cmd> #映射容器的8080端口到宿主机的80端口

删除容器命令

sudo docker rm `sudo docker ps -a -q`#删除所有容器
sudo docker rm $CONTAINER_ID#删除容器id为CONTAINER_ID的容器
#其他命令快速参考：
sudo docker images #查看本地镜像
sudo docker attach $CONTAINER_ID #启动一个已存在的docker实例
sudo docker stop $CONTAINER_ID #停止docker实例
sudo docker logs $CONTAINER_ID #查看docker实例运行日志，确保正常运行
sudo docker inspect $CONTAINER_ID #查看container的实例属性，比如ip等等

sudo docker run -t -i -v /home/linjiqin/dev/docker:/home/mycontainer:rw -p 8000:8000 mydocker /bin/bash

```

Node.js
---------

```

1.nvm ls //当前系统中装的node.js版本
2.npm install npm -g //更新npm工具
3.npm install -g react-native-cli   //安装react-native
4.react-native init AwesomeProject  //用当前版本的react-native初始化一个工程
5.react-native upgrade //把当前工程更新成react-native对应的版本
6.react-native run-ios
6.react-native -v //当前react-native版本
3.npm install --save react-native@0.21  //把react-native更新到0.21

--------------
1.rm -rf node_modules
2.vi package.json  //"react-native": "^0.21.0"
3.npm install --save

---------------------
安装node:
1.sudo chown -R `whoami` /usr/local
2.brew install node
node --version
npm --version

设置npm镜像:
npm config set registry https://registry.npm.taobao.org --global
npm config set disturl https://npm.taobao.org/dist --global

---------------------
安装yarn
1.npm install -g yarn react-native-cli

配置淘宝镜像
1.yarn config set registry https://registry.npm.taobao.org --global
2.yarn config set disturl https://npm.taobao.org/dist --global
3.yarn add ..

更新npm:
1.npm i-g npm

安装watchman,实时刷新
1.brew install watchman

安装Flow，类型检查工具
brew install flow

------------------------
1.配置携程镜象
yarn config set registry http://npm.dev.sh.democorp.com:8001/

------------------------
清除淘宝镜像
npm config delete registry
npm config delete disturl
或者 
npm config edit 
找到淘宝那两行,删除

-------------------------------
手动的太麻烦了，一般用 https://www.npmjs.com/package/nrm 做切换
$ nrm ls
 
* npm ---- https://registry.npmjs.org/
  cnpm --- http://r.cnpmjs.org/
  taobao - http://registry.npm.taobao.org/
  eu ----- http://registry.npmjs.eu/
  au ----- http://registry.npmjs.org.au/
  sl ----- http://npm.strongloop.com/
  nj ----- https://registry.nodejitsu.com/
  pt ----- http://registry.npmjs.pt/
  
-------------------------------------
2.安装crn-cli工具
yarn global add @demo/crn-cli

-------------------------------
进入空铁目录
1.　npm uninstall @demo/crn-cli -g && npm install @demo/crn-cli -g --registry=http://npm.dev.sh.democorp.com:8001
2.　npm  install 
3.　crn-cli run-ios 或npm start 

---------------------------------

crn-cli init 创建依赖于CRN框架的模板工程
crn-cli start 启动RN服务,默认端口5389
crn-cli run-ios 运行demo IOS 模拟器
crn-cli run-android 运行demo Android 真机
crn-cli run-patch 替换RN依赖文件
crn-cli log 本地启动日志服务，默认端口5387
crn-cli example 建立CRN组件和API调用示例工程
crn-cli cli-update 更新cli版本
crn-cli crn-update 更新@demo/crn版本

```

---------------------------------


找到一个方法可以通过命令行来安装ipa，本地实验了下可行的。
sudo npm install -g ios-deploy --unsafe-perm=true
sudo npm install -g ipa-deploy
ipa-deploy <path_to_ipa_file>

====================================
NSAppTransportSecurity NSAllowsArbitraryLoads(YES允许http)
NSAppTransportSecurity NSExceptionDomains(在白名单中则允许http)

====================================
Mac下安装SLOCCount
brew install sloccount

--------------
计算行数：
sloccount Deliveryœ



====================================


禁用启用mac osx 的root保护,command+r 进入UTILITY,打开终端运行。

```
csrutil status
csrutil disable=
csrutil enable

```

----------------------------

```
sudo chown -R $(whoami) /usr/local/include /usr/local/lib /usr/local/lib/pkgconfig /usr/local/share/info /usr/local/share/man/man3 /usr/local/share/man/man5 /usr/local/share/man/man7

```

查看进程与哪个应用关联,找出占用内存或CPU的应用

```
spindump
```

*  text analysis ---

```
tail -n 3 jan2017articles.csv
head -n 1 jan2017articles.csv
wc -l jan2017articles.csv
grep -i "security" jan2017articles.csv
grep -i "security" jan2017articles.csv | wc -l
grep "20 Jan 2017" jan2017articles.csv | tr ',' '\t' > jan20only.tsv
sort -nr -t$'\t' -k8 jan20only.tsv | head -n 1
sed '1 d' jan2017articles.csv > jan17no_headers.csv
sort authors.txt | uniq -c > authors-sorted.txt
awk -F "\t" '{print $3 "  " $NF}' jan20only.tsv
grep "authentication failure" /var/log/auth.log | cut -d '=' -f 8


```





