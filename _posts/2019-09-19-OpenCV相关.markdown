opencv ios install

```
编译： https://docs.opencv.org/master/d5/da3/tutorial_ios_install.html
demo: https://docs.opencv.org/master/d7/d88/tutorial_hello.html
1.下载opencv源码，opencv_contrib源码
2. 安装Cmake
3. 编译： python opencv/platforms/ios/build_framework.py ios --contrib opencv_contrib --iphoneos_archs arm64

```


vscode 中可以跳转到opencv头文件说明

```
1.查看opencv所在路径
$ brew info OpenCV

2.在vscode 中打开 View-->Command Palette-->C/C++ Edit configuration(UI)
将头文件目录/usr/local/Cellar/opencv/4.5.3_2/include/opencv4/opencv2/ 添加到include path中

```

可以使python中有xfeature功能

```
pip install opencv-python
pip install opencv-contrib-python

```

### OpenCV NCNN CMakeLists.txt

```
cmake_minimum_required(VERSION 2.8)

# define the project name
set(project_name "OpenCV3_Demo")

# set the project name
project("${project_name}")

# this is a C++11 project
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")

# add opencv package to the project
find_package( OpenCV REQUIRED )
INCLUDE_DIRECTORIES( ${OpenCV_INCLUDE_DIRS} ) 
SET(OpenCV_LIBRARIES ${OpenCV_LIBS})

message(STATUS "OpenCV library status:")
message(STATUS "    version: ${OpenCV_VERSION}")
message(STATUS "    libraries: ${OpenCV_LIBS}")
message(STATUS "    include path: ${OpenCV_INCLUDE_DIRS}")

set(NCNN_FRAMEWORK_PATH ${PROJECT_SOURCE_DIR}/frameworks)
message(0 "ncnn framework path: ${NCNN_FRAMEWORK_PATH}")

add_executable(arcface "")


target_include_directories(arcface PRIVATE
  ${NCNN_FRAMEWORK_PATH}/**
  ${PROJECT_SOURCE_DIR}
)

#find custom framework
find_library(NCNN_LIB ncnn "${NCNN_FRAMEWORK_PATH}")
find_library(OPENMP_LIB openmp "${NCNN_FRAMEWORK_PATH}")
message(0 "ncnn libs path: ${NCNN_LIB}")
message(0 "openmp libs path: ${OPENMP_LIB}")



# add executable
target_sources(arcface
  PRIVATE
    "${PROJECT_SOURCE_DIR}/main.cpp"
    "${PROJECT_SOURCE_DIR}/arcface.cpp"
    "${PROJECT_SOURCE_DIR}/arcface.h"
    "${PROJECT_SOURCE_DIR}/base.cpp"
    "${PROJECT_SOURCE_DIR}/base.h"
    "${PROJECT_SOURCE_DIR}/mtcnn.cpp"
    "${PROJECT_SOURCE_DIR}/mtcnn.h"
    )



if(APPLE)
  set_target_properties(arcface PROPERTIES LINK_FLAGS "-Wl,-F${NCNN_FRAMEWORK_PATH}")
  target_link_libraries(arcface PRIVATE ${NCNN_LIB} ${OPENMP_LIB} ${OpenCV_LIBRARIES})
endif()


#SET (IMAGES ${CMAKE_SOURCE_DIR}/images/puppy.bmp ${CMAKE_SOURCE_DIR}/images/smalllogo.png ${CMAKE_SOURCE_DIR}/images/soldier.jpeg ${CMAKE_SOURCE_DIR}/images/face.mp4 ${CMAKE_SOURCE_DIR}/images/model/res10_300x300_ssd_iter_140000.caffemodel ${CMAKE_SOURCE_DIR}/images/model/deploy.prototxt)
#FILE(COPY ${IMAGES} DESTINATION .)
#FILE(COPY ${IMAGES} DESTINATION "Debug")
#FILE(COPY ${IMAGES} DESTINATION "Release")


```


### NCNN图像的展示

```
cv::Mat ncnn2cv(ncnn::Mat img)
{
    unsigned char pix[img.h * img.w * 3];
    img.to_pixels(pix, ncnn::Mat::PIXEL_BGR);
    cv::Mat cv_img(img.h, img.w, CV_8UC3);
    for (int i = 0; i < cv_img.rows; i++)
    {
        for (int j = 0; j < cv_img.cols; j++)
        {
            cv_img.at<cv::Vec3b>(i,j)[0] = pix[3 * (i * cv_img.cols + j)];
            cv_img.at<cv::Vec3b>(i,j)[1] = pix[3 * (i * cv_img.cols + j) + 1];
            cv_img.at<cv::Vec3b>(i,j)[2] = pix[3 * (i * cv_img.cols + j) + 2];
        }
    }
    return cv_img;
}

imshow("det1", ncnn2cv(det1));

```